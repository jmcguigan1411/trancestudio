I want to build a browser-based music production app focused on trance and house music, with a simple but powerful UI, suitable for both beginners and experienced producers.

The app should allow users to create, remix, and manipulate music, with access to a wide variety of built-in sounds and tools.

ðŸ”§ Core Features:
	1.	Sound Library (1000+ sounds):
	â€¢	Include preloaded samples categorized by drums, basslines, synths, leads, pads, FX, vocals.
	â€¢	Option for users to upload their own samples (WAV, MP3).
	â€¢	Allow users to tag, categorize, and save custom sounds to their personal library.
	2.	Sound Editor/Designer:
	â€¢	Enable waveform editing (cut, trim, loop).
	â€¢	Include pitch shifting, time stretching, and reversing sounds.
	â€¢	Offer distortion, delay, reverb, chorus, flanger, and filter effects (low-pass, high-pass, band-pass).
	â€¢	Visual EQ editor with draggable bands.
	â€¢	Basic synthesizer module for creating custom sounds (oscillators, LFOs, ADSR envelope).
	3.	Sequencer/Arrangement View:
	â€¢	Drag-and-drop interface to arrange tracks and loops.
	â€¢	Layer multiple tracks (multi-track support).
	â€¢	Grid-style step sequencer for beat making (like FL Studio or Ableton).
	â€¢	MIDI keyboard input support (virtual + external).
	4.	Mixer:
	â€¢	Per-track volume, pan, and mute/solo controls.
	â€¢	Add/send effects to individual tracks or master channel.
	â€¢	Visualization of levels with VU meters.
	5.	Remixing Tools:
	â€¢	Auto BPM detection and sync for imported samples.
	â€¢	Tools for slicing audio into loops or one-shots.
	â€¢	DJ-style live remixing pads (8+ pads with assignable samples).
	â€¢	Looping, stuttering, gating, and reverse effects live.
	6.	Export & Import:
	â€¢	Allow saving/exporting the final track as WAV/MP3.
	â€¢	Import/export project files (.json or custom format) to resume later.
	7.	UI Design:
	â€¢	Clean, intuitive interface with a dark theme.
	â€¢	Minimal but modern controlsâ€”knobs, sliders, grids.
	â€¢	Responsive layout (desktop/tablet/mobile friendly).
	8.	Audio Engine/Backend:
	â€¢	Use the Web Audio API or Tone.js for audio processing.
	â€¢	If needed, use WASM-based libraries for performance-heavy DSP.
	9.	Optional but Nice-to-Have:
	â€¢	Built-in tutorials or tooltips for beginners.
	â€¢	Share and browse community-made sounds or remixes.
	â€¢	Live collab feature (Firebase/WebSockets) for real-time collaboration.
	â€¢	AI-assisted remix suggestions or beat-matching.

Start by scaffolding the app with all major components stubbed out and use dummy sounds and samples. Use React (with Tailwind or styled-components) or another modern frontend framework of your choice. Modularize the code so components like the sequencer, mixer, editor, and library can evolve independently.